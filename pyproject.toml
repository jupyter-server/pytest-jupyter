[build-system]
requires = [
    "hatchling>=1.10.0",
]
build-backend = "hatchling.build"

[project]
name = "pytest-jupyter"
dynamic = [
    "version",
]
description = "A pytest plugin for testing Jupyter libraries and extensions."
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Jupyter Development Team", email = "jupyter@googlegroups.com" },
]
keywords = [
    "Jupyter",
    "pytest",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Jupyter",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "pytest",
    "jupyter_core"
]
requires-python = ">=3.7"


[project.optional-dependencies]
docs = [
    "myst_parser",
    "pydata_sphinx_theme",
    "Sphinx",
    "sphinxcontrib-spelling"
]
client = [
    "jupyter_client>=7.4.0",
    "ipykernel>=6.14"
]
server = [
    "jupyter_server>=1.21",
    "nbformat>=5.3",
    "pytest-jupyter[client]",
]
test = [
    "pytest-timeout"
]

[project.urls]
Homepage = "http://jupyter.org"
Funding = "https://numfocus.org/donate"
Source = "https://github.com/jupyter-server/pytest-jupyter"
Tracker = "https://github.com/jupyter-server/pytest-jupyter/issues"

[tool.hatch.version]
path = "pytest_jupyter/_version.py"
validate-bump = false

[tool.hatch.build.targets.sdist]
include = [
    "/pytest_jupyter",
    "/tests",
]

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.scripts]
build = "make -C docs html SPHINXOPTS='-W'"

[tool.hatch.envs.test]
features = ["test", "server", "client"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["test", "server", "client"]
dependencies = ["coverage[toml]"]
[tool.hatch.envs.cov.scripts]
test = "coverage run -m pytest {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
features = ["test", "server", "client"]
dependencies = ["mypy>=0.990"]
[tool.hatch.envs.typing.scripts]
test = "mypy --install-types --non-interactive {args:.}"

[tool.hatch.envs.lint]
dependencies = [
  "black[jupyter]==23.1.0",
  "mdformat>0.7",
  "ruff==0.0.254",
]
detached = true
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "mdformat --check {args:docs *.md}"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "mdformat {args:docs *.md}"
]

[tool.jupyter-releaser.options]
post-version-spec = "dev"

[tool.pytest.ini_options]
addopts = "-raXs --durations 10 --color=yes --doctest-modules"
testpaths = [
    "tests"
]
timeout = 10
# Restore this setting to debug failures
timeout_method = "thread"
filterwarnings= [
  # Fail on warnings
  "error",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
pretty = true
show_error_context = true
show_error_codes = true
strict_equality = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
explicit_package_bases = true
namespace_packages = true

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py38"]

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
  "A", "B", "C", "DTZ", "E", "EM", "F", "FBT", "I", "ICN", "ISC", "N",
  "PLC", "PLE", "PLR", "PLW", "Q", "RUF", "S", "SIM", "T", "TID", "UP",
  "W", "YTT",
]
ignore = [
# Q000 Single quotes found but double quotes preferred
"Q000",
# FBT001 Boolean positional arg in function definition
"FBT001", "FBT002", "FBT003",
# E501 Line too long (158 > 100 characters)
"E501",
# SIM105 Use `contextlib.suppress(...)`
"SIM105",
#PLR0913 Too many arguments to function call
"PLR0913",
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.per-file-ignores]
# B011 Do not call assert False since python -O removes these calls
# F841 local variable 'foo' is assigned to but never used
# C408 Unnecessary `dict` call
# E402 Module level import not at top of file
# T201 `print` found
# B007 Loop control variable `i` not used within the loop body.
# N802 Function name `assertIn` should be lowercase
# S101 Use of `assert` detected
"tests/*" = ["B011", "F841", "C408", "E402", "T201", "B007", "N802", "S101"]

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=100
exclude = ["docs", "tests"]
